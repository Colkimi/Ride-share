/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VehicleRouteImport } from './routes/vehicle'
import { Route as UsersRouteImport } from './routes/users'
import { Route as ThemeRouteImport } from './routes/theme'
import { Route as SupportRouteImport } from './routes/support'
import { Route as SuccessRouteImport } from './routes/success'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as ShareRouteImport } from './routes/share'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReviewRouteImport } from './routes/review'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LandingRouteImport } from './routes/landing'
import { Route as FailedRouteImport } from './routes/failed'
import { Route as EarningsRouteImport } from './routes/earnings'
import { Route as DriverRegistrationRouteImport } from './routes/driver-registration'
import { Route as DriverRouteImport } from './routes/driver'
import { Route as DriveRouteImport } from './routes/drive'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CreateRouteImport } from './routes/create'
import { Route as CalenderRouteImport } from './routes/calender'
import { Route as BookingsRouteImport } from './routes/bookings'
import { Route as AdminDashboardRouteImport } from './routes/adminDashboard'
import { Route as AccountRouteImport } from './routes/account'
import { Route as AboutRouteImport } from './routes/about'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as UsersCreateRouteImport } from './routes/users.create'
import { Route as PaymentBookingIdRouteImport } from './routes/payment/bookingId'

const VehicleRoute = VehicleRouteImport.update({
  id: '/vehicle',
  path: '/vehicle',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ThemeRoute = ThemeRouteImport.update({
  id: '/theme',
  path: '/theme',
  getParentRoute: () => rootRouteImport,
} as any)
const SupportRoute = SupportRouteImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRouteImport,
} as any)
const SuccessRoute = SuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const ShareRoute = ShareRouteImport.update({
  id: '/share',
  path: '/share',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewRoute = ReviewRouteImport.update({
  id: '/review',
  path: '/review',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingRoute = LandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const FailedRoute = FailedRouteImport.update({
  id: '/failed',
  path: '/failed',
  getParentRoute: () => rootRouteImport,
} as any)
const EarningsRoute = EarningsRouteImport.update({
  id: '/earnings',
  path: '/earnings',
  getParentRoute: () => rootRouteImport,
} as any)
const DriverRegistrationRoute = DriverRegistrationRouteImport.update({
  id: '/driver-registration',
  path: '/driver-registration',
  getParentRoute: () => rootRouteImport,
} as any)
const DriverRoute = DriverRouteImport.update({
  id: '/driver',
  path: '/driver',
  getParentRoute: () => rootRouteImport,
} as any)
const DriveRoute = DriveRouteImport.update({
  id: '/drive',
  path: '/drive',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateRoute = CreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CalenderRoute = CalenderRouteImport.update({
  id: '/calender',
  path: '/calender',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsRoute = BookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/adminDashboard',
  path: '/adminDashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersCreateRoute = UsersCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => UsersRoute,
} as any)
const PaymentBookingIdRoute = PaymentBookingIdRouteImport.update({
  id: '/payment/bookingId',
  path: '/payment/bookingId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/adminDashboard': typeof AdminDashboardRoute
  '/bookings': typeof BookingsRoute
  '/calender': typeof CalenderRoute
  '/create': typeof CreateRoute
  '/dashboard': typeof DashboardRoute
  '/drive': typeof DriveRoute
  '/driver': typeof DriverRoute
  '/driver-registration': typeof DriverRegistrationRoute
  '/earnings': typeof EarningsRoute
  '/failed': typeof FailedRoute
  '/landing': typeof LandingRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/review': typeof ReviewRoute
  '/settings': typeof SettingsRoute
  '/share': typeof ShareRoute
  '/sign-up': typeof SignUpRoute
  '/success': typeof SuccessRoute
  '/support': typeof SupportRoute
  '/theme': typeof ThemeRoute
  '/users': typeof UsersRouteWithChildren
  '/vehicle': typeof VehicleRoute
  '/payment/bookingId': typeof PaymentBookingIdRoute
  '/users/create': typeof UsersCreateRoute
}
export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/adminDashboard': typeof AdminDashboardRoute
  '/bookings': typeof BookingsRoute
  '/calender': typeof CalenderRoute
  '/create': typeof CreateRoute
  '/dashboard': typeof DashboardRoute
  '/drive': typeof DriveRoute
  '/driver': typeof DriverRoute
  '/driver-registration': typeof DriverRegistrationRoute
  '/earnings': typeof EarningsRoute
  '/failed': typeof FailedRoute
  '/landing': typeof LandingRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/review': typeof ReviewRoute
  '/settings': typeof SettingsRoute
  '/share': typeof ShareRoute
  '/sign-up': typeof SignUpRoute
  '/success': typeof SuccessRoute
  '/support': typeof SupportRoute
  '/theme': typeof ThemeRoute
  '/users': typeof UsersRouteWithChildren
  '/vehicle': typeof VehicleRoute
  '/payment/bookingId': typeof PaymentBookingIdRoute
  '/users/create': typeof UsersCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRoute
  '/about': typeof AboutRoute
  '/account': typeof AccountRoute
  '/adminDashboard': typeof AdminDashboardRoute
  '/bookings': typeof BookingsRoute
  '/calender': typeof CalenderRoute
  '/create': typeof CreateRoute
  '/dashboard': typeof DashboardRoute
  '/drive': typeof DriveRoute
  '/driver': typeof DriverRoute
  '/driver-registration': typeof DriverRegistrationRoute
  '/earnings': typeof EarningsRoute
  '/failed': typeof FailedRoute
  '/landing': typeof LandingRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/review': typeof ReviewRoute
  '/settings': typeof SettingsRoute
  '/share': typeof ShareRoute
  '/sign-up': typeof SignUpRoute
  '/success': typeof SuccessRoute
  '/support': typeof SupportRoute
  '/theme': typeof ThemeRoute
  '/users': typeof UsersRouteWithChildren
  '/vehicle': typeof VehicleRoute
  '/payment/bookingId': typeof PaymentBookingIdRoute
  '/users/create': typeof UsersCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/about'
    | '/account'
    | '/adminDashboard'
    | '/bookings'
    | '/calender'
    | '/create'
    | '/dashboard'
    | '/drive'
    | '/driver'
    | '/driver-registration'
    | '/earnings'
    | '/failed'
    | '/landing'
    | '/login'
    | '/notifications'
    | '/review'
    | '/settings'
    | '/share'
    | '/sign-up'
    | '/success'
    | '/support'
    | '/theme'
    | '/users'
    | '/vehicle'
    | '/payment/bookingId'
    | '/users/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/account'
    | '/adminDashboard'
    | '/bookings'
    | '/calender'
    | '/create'
    | '/dashboard'
    | '/drive'
    | '/driver'
    | '/driver-registration'
    | '/earnings'
    | '/failed'
    | '/landing'
    | '/login'
    | '/notifications'
    | '/review'
    | '/settings'
    | '/share'
    | '/sign-up'
    | '/success'
    | '/support'
    | '/theme'
    | '/users'
    | '/vehicle'
    | '/payment/bookingId'
    | '/users/create'
  id:
    | '__root__'
    | '/_layout'
    | '/about'
    | '/account'
    | '/adminDashboard'
    | '/bookings'
    | '/calender'
    | '/create'
    | '/dashboard'
    | '/drive'
    | '/driver'
    | '/driver-registration'
    | '/earnings'
    | '/failed'
    | '/landing'
    | '/login'
    | '/notifications'
    | '/review'
    | '/settings'
    | '/share'
    | '/sign-up'
    | '/success'
    | '/support'
    | '/theme'
    | '/users'
    | '/vehicle'
    | '/payment/bookingId'
    | '/users/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRoute
  AboutRoute: typeof AboutRoute
  AccountRoute: typeof AccountRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  BookingsRoute: typeof BookingsRoute
  CalenderRoute: typeof CalenderRoute
  CreateRoute: typeof CreateRoute
  DashboardRoute: typeof DashboardRoute
  DriveRoute: typeof DriveRoute
  DriverRoute: typeof DriverRoute
  DriverRegistrationRoute: typeof DriverRegistrationRoute
  EarningsRoute: typeof EarningsRoute
  FailedRoute: typeof FailedRoute
  LandingRoute: typeof LandingRoute
  LoginRoute: typeof LoginRoute
  NotificationsRoute: typeof NotificationsRoute
  ReviewRoute: typeof ReviewRoute
  SettingsRoute: typeof SettingsRoute
  ShareRoute: typeof ShareRoute
  SignUpRoute: typeof SignUpRoute
  SuccessRoute: typeof SuccessRoute
  SupportRoute: typeof SupportRoute
  ThemeRoute: typeof ThemeRoute
  UsersRoute: typeof UsersRouteWithChildren
  VehicleRoute: typeof VehicleRoute
  PaymentBookingIdRoute: typeof PaymentBookingIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vehicle': {
      id: '/vehicle'
      path: '/vehicle'
      fullPath: '/vehicle'
      preLoaderRoute: typeof VehicleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/theme': {
      id: '/theme'
      path: '/theme'
      fullPath: '/theme'
      preLoaderRoute: typeof ThemeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/success': {
      id: '/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof SuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share': {
      id: '/share'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof ShareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/review': {
      id: '/review'
      path: '/review'
      fullPath: '/review'
      preLoaderRoute: typeof ReviewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/failed': {
      id: '/failed'
      path: '/failed'
      fullPath: '/failed'
      preLoaderRoute: typeof FailedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/earnings': {
      id: '/earnings'
      path: '/earnings'
      fullPath: '/earnings'
      preLoaderRoute: typeof EarningsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/driver-registration': {
      id: '/driver-registration'
      path: '/driver-registration'
      fullPath: '/driver-registration'
      preLoaderRoute: typeof DriverRegistrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/driver': {
      id: '/driver'
      path: '/driver'
      fullPath: '/driver'
      preLoaderRoute: typeof DriverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/drive': {
      id: '/drive'
      path: '/drive'
      fullPath: '/drive'
      preLoaderRoute: typeof DriveRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calender': {
      id: '/calender'
      path: '/calender'
      fullPath: '/calender'
      preLoaderRoute: typeof CalenderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookings': {
      id: '/bookings'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof BookingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/adminDashboard': {
      id: '/adminDashboard'
      path: '/adminDashboard'
      fullPath: '/adminDashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/create': {
      id: '/users/create'
      path: '/create'
      fullPath: '/users/create'
      preLoaderRoute: typeof UsersCreateRouteImport
      parentRoute: typeof UsersRoute
    }
    '/payment/bookingId': {
      id: '/payment/bookingId'
      path: '/payment/bookingId'
      fullPath: '/payment/bookingId'
      preLoaderRoute: typeof PaymentBookingIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface UsersRouteChildren {
  UsersCreateRoute: typeof UsersCreateRoute
}

const UsersRouteChildren: UsersRouteChildren = {
  UsersCreateRoute: UsersCreateRoute,
}

const UsersRouteWithChildren = UsersRoute._addFileChildren(UsersRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRoute,
  AboutRoute: AboutRoute,
  AccountRoute: AccountRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  BookingsRoute: BookingsRoute,
  CalenderRoute: CalenderRoute,
  CreateRoute: CreateRoute,
  DashboardRoute: DashboardRoute,
  DriveRoute: DriveRoute,
  DriverRoute: DriverRoute,
  DriverRegistrationRoute: DriverRegistrationRoute,
  EarningsRoute: EarningsRoute,
  FailedRoute: FailedRoute,
  LandingRoute: LandingRoute,
  LoginRoute: LoginRoute,
  NotificationsRoute: NotificationsRoute,
  ReviewRoute: ReviewRoute,
  SettingsRoute: SettingsRoute,
  ShareRoute: ShareRoute,
  SignUpRoute: SignUpRoute,
  SuccessRoute: SuccessRoute,
  SupportRoute: SupportRoute,
  ThemeRoute: ThemeRoute,
  UsersRoute: UsersRouteWithChildren,
  VehicleRoute: VehicleRoute,
  PaymentBookingIdRoute: PaymentBookingIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
